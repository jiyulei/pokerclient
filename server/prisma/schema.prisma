generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Book {
  id     Int    @id @default(autoincrement())
  title  String
  author String
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  username          String?   @unique
  passwordHash      String?
  image             String?
  provider          String?
  providerAccountId String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt @default(now())

  players           Player[]
}

model Game {
  id                  String    @id @default(cuid())
  
  // 游戏状态
  status              String    @default("WAITING") // WAITING, IN_PROGRESS, COMPLETED
  round               Int       @default(0)
  currentRound        String    @default("preflop") // preflop, flop, turn, river
  pot                 Int       @default(0)
  communityCards      String[]
  currentPlayerPos    Int?
  dealerPos           Int       @default(0)
  smallBlindPos       Int       @default(1)
  bigBlindPos         Int       @default(2)
  currentRoundMaxBet  Int       @default(0)
  mainPot             Int       @default(0)
  sidePots            Json?     // 复杂类型用Json存储 [{amount: Int, playerIds: [String]}]
  
  // 游戏设定
  initialChips        Int       @default(1000)
  smallBlind          Int       @default(5)
  bigBlind            Int       @default(10)
  timeLimit           Int       @default(30)
  maxPlayers          Int       @default(9)
  
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // 关系
  players             Player[]
  messages            Message[]
}

model Player {
  id         String   @id @default(cuid())
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?
  game       Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId     String

  chips      Int
  currentBet Int      @default(0)
  totalBet   Int      @default(0)
  isFolded   Boolean  @default(false)
  isAllIn    Boolean  @default(false)
  hand       String[]
  position   Int
  isActive   Boolean  @default(true)
  hasChecked Boolean  @default(false)

  totalRounds Int @default(0)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  messages   Message[]
}

model Message {
  id        String   @id @default(cuid())
  content   String
  type      String   // "broadcast" or "private"

  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId    String

  player    Player?  @relation(fields: [playerId], references: [id], onDelete: SetNull)
  playerId  String?

  createdAt DateTime @default(now())
}
